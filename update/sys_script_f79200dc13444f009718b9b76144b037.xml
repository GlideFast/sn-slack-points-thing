<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_snc_slack_points_slack_event</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Process Points</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// TODO: Move this logic into a Script Include
	var payloadObject = JSON.parse(current.payload); 

	// DO NOT process bot messages
	if (payloadObject.event.subtype == 'bot_message') {
		return; 
	}

	var matches = payloadObject.event.text.match(/\s?\@?(\S+)\s?\+\+/g); 

	matches.forEach(function (t) {
		var thing = t.replace('++', ''); 
		thing = thing.trim();
		var points = 0;

		// Check for self-points
		if (thing.contains(payloadObject.event.user)) {
			//Send self points error
			sendResponse(gs.getMessage('self_points_error'),gs.getProperty('x_snc_slack_points.post_ephemeral_url'),payloadObject,payloadObject.event.user);
			return; 
		}

		var grSlackUser = new GlideRecord('x_snc_slack_points_slack_user'); 
		grSlackUser.addQuery('user_id', thing); 
		grSlackUser.query(); 

		if (grSlackUser.next()) {
			var exSid = grSlackUser.getUniqueValue();
			points = grSlackUser.points + 1;
			grSlackUser.points = points;
			grSlackUser.update();
			logPoint(exSid,current.getUniqueValue(),payloadObject);
		} else {
			var slack = new SlackClient(); 
			var userInfo = slack.getUserInfo(thing.replace('<', '').replace('>', '').replace('@', ''));
			if(userInfo.ok){
				grSlackUser.initialize();
				points = 1;
				grSlackUser.user_id = thing;
				grSlackUser.user_name = userInfo.user.name;
				grSlackUser.user_email = userInfo.user.profile.email;
				grSlackUser.points = points; 
				var newSid = grSlackUser.insert();
				logPoint(newSid,current.getUniqueValue(),payloadObject);
			}
			else{
				var user_not_found_msg = gs.getMessage('user_not_found_error',thing);
				sendResponse(gs.urlEncode(user_not_found_msg),gs.getProperty('x_snc_slack_points.post_ephemeral_url'),payloadObject,payloadObject.event.user);
				return;
			}
		}

		//Send new points message
		var randomMessage = new x_snc_slack_points.RandomMessage();
		sendResponse(gs.urlEncode(randomMessage.getMessage(thing,points)),gs.getProperty('x_snc_slack_points.post_message_url'),payloadObject);
	}); 

	// var userId = payloadObject.event.text.match(/\s?\@?(\S+)\s?\+\+/)[1]; 

	function sendResponse(message,endpoint,payload,user){
		var rm = new sn_ws.RESTMessageV2();
		rm.setLogLevel('all');
		rm.setHttpMethod('POST');
		rm.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded'); 
		rm.setEndpoint(endpoint);

		var bodyString = '';
		bodyString += 'token=' + gs.urlEncode(gs.getProperty('x_snc_slack_points.slack_bot_token')); 
		bodyString += '&channel=' + gs.urlEncode(payload.event.channel);
		if (payload.event.thread_ts) {
			bodyString += '&thread_ts=' + gs.urlEncode(payload.event.thread_ts); 
		}
		if(user){
			bodyString += '&user=' + gs.urlEncode(user);
		}
		bodyString += '&text=' + message;

		rm.setRequestBody(bodyString);
		var response = rm.execute();
		var responseBody = response.getBody();
		var statusCode = response.getStatusCode();
	}

	function logPoint(userSid,eventSid,payload){
		var grSlackPoint = new GlideRecord('x_snc_slack_points_point');
		grSlackPoint.initialize();
		grSlackPoint.giver = payload.event.user;
		grSlackPoint.target = userSid;
		grSlackPoint.source_event = eventSid;
		grSlackPoint.text = payload.event.text;
		grSlackPoint.insert();
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>josh.nerius</sys_created_by>
        <sys_created_on>2017-07-14 21:14:05</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f79200dc13444f009718b9b76144b037</sys_id>
        <sys_mod_count>48</sys_mod_count>
        <sys_name>Process Points</sys_name>
        <sys_overrides/>
        <sys_package display_value="Slack Points Thing" source="x_snc_slack_points">4f6df3c813444f009718b9b76144b02c</sys_package>
        <sys_policy/>
        <sys_scope display_value="Slack Points Thing">4f6df3c813444f009718b9b76144b02c</sys_scope>
        <sys_update_name>sys_script_f79200dc13444f009718b9b76144b037</sys_update_name>
        <sys_updated_by>Dennis.Bennett</sys_updated_by>
        <sys_updated_on>2019-05-24 20:05:00</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=f79200dc13444f009718b9b76144b037"/>
</record_update>
